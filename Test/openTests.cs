using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using EzAdo;
using EzAdo.Models;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using System.Data;
using EzAdo.Extensions;
using System.Collections.Generic;

namespace Test
{

    [TestClass]
    public class openTests
    {
        private class Person
        {
            public int PersonId { set; get; }
            public string LastName { set; get; }
            public string FirstName { set; get; }
            public string Email { set; get; }
        }

        private class Order
        {
            public int OrderId { set; get; }
            public string OrderName { set; get; }
            List<OrderItem> OrderItems { set; get; }
        }

        private class OrderItem
        {
            public int OrderItemId { set; get; }
            public string Name { set; get; }
            public string Comments { set; get; }
        }
        
        [TestMethod]
        public void Preload()
        {            
            ProcedureFactory.Rebuild();
        }

        [TestMethod]
        public void LoadFromObject1()
        {
            //first load from object has to create mappings and should be slower
            Person person = new Person() { FirstName = "John", LastName = "Dor", Email = "JohnDoe@gmail.com" };
            Procedure proc = ProcedureFactory.GetProcedure("open", "POST_PERSON");
            proc.LoadFromObject<Person>(person);
            Person result = proc.Execute<Person>();
            Assert.AreNotEqual(result.PersonId, person.PersonId);
            Assert.AreEqual(result.FirstName, person.FirstName);
            Assert.AreEqual(result.LastName, person.LastName);
            Assert.AreEqual(result.Email, person.Email);
        }

        [TestMethod]
        public void LoadFromObject2()
        {
            Person person = new Person() { FirstName = "Jack", LastName = "Be", Email = "JackBeNimble@gmail.com" };
            Procedure proc = ProcedureFactory.GetProcedure("open", "POST_PERSON");
            proc.LoadFromObject<Person>(person);
            Person result = proc.Execute<Person>();
            Assert.AreNotEqual(result.PersonId, person.PersonId);
            Assert.AreEqual(result.FirstName, person.FirstName);
            Assert.AreEqual(result.LastName, person.LastName);
            Assert.AreEqual(result.Email, person.Email);

        }

        [TestMethod]
        public void LoadFromParameters1()
        {
            //Type conversion when using the indexer
            Person person = new Person() { FirstName = "Jeff", LastName = "Smarty Pants", Email = "SmartyPants@gmail.com" };
            Procedure proc = ProcedureFactory.GetProcedure("open", "POST_PERSON");
            proc["firstName"] = person.FirstName;
            proc["lastName"] = person.LastName;
            proc["email"] = person.Email;

            Person result = proc.Execute<Person>();
            Assert.AreNotEqual(result.PersonId, person.PersonId);
            Assert.AreEqual(result.FirstName, person.FirstName);
            Assert.AreEqual(result.LastName, person.LastName);
            Assert.AreEqual(result.Email, person.Email);

        }

        [TestMethod]
        public void LoadFromParameters2()
        {
            //Generic setters provide additional validation
            
            Procedure proc = ProcedureFactory.GetProcedure("open", "POST_PERSON");
            proc.SetValue<string>("firstName", "Ole");
            proc.SetValue<string>("lastName", "ole");
            proc.SetValue<string>("email", "why@me.com");

            string result = proc.ExecuteJson();
            Assert.AreEqual(proc.ReturnValue<int>(), 200);

        }

        [TestMethod]
        public void PostOrder1()
        {
            string json = "{'personId': 1, 'orderName': 'my first order', 'orderItems': [{'name': 'pizza', 'comments': 'Extra Cheese Please'},{'name': 'italian sandwich', 'comments': 'No peppers'}]}";
            Procedure procedure = ProcedureFactory.GetRestProcedure("POST", "trusted", "ORDER");
            procedure.LoadFromJson(json);
            string result = procedure.ExecuteJson();
            
        }

        [TestMethod]
        public void PostOrder2()
        {
            string json = "{'personId': 1, 'orderName': 'my second order', 'orderItems': [{'name': 'pizza', 'comments': 'Extra Cheese Please'},{'name': 'italian sandwich', 'comments': 'No peppers'}]}";
            Procedure procedure = ProcedureFactory.GetRestProcedure("POST", "trusted", "ORDER");
            procedure.LoadFromJson(json);
            string result = procedure.ExecuteJson();

            Procedure proc = ProcedureFactory.GetRestProcedure("GET", "open", "ORDER");
            proc.SetValue<int>("orderId", 1);
            Order order = proc.Execute<Order>();

            Assert.AreEqual(order.OrderId, 1);


        }

        [TestMethod]
        public void GetOrder()
        {
            
        }
        [TestMethod]
        public void PostPersonDuplicates()
        {
            //Generic setters provide additional validation

            Procedure procGood = ProcedureFactory.GetProcedure("open", "POST_PERSON");
            procGood.SetValue<string>("firstName", "a");
            procGood.SetValue<string>("lastName", "a");
            procGood.SetValue<string>("email", "a@a.com");
            procGood.Execute<Person>();

            Procedure procBad = ProcedureFactory.GetProcedure("open", "POST_PERSON");
            procBad.SetValue<string>("firstName", "a");
            procBad.SetValue<string>("lastName", "a");
            procBad.SetValue<string>("email", "a@a.com");
            procBad.Execute<Person>();

            Assert.AreEqual(procGood.GetValue<int>("RETURN_VALUE"), 200);
            Assert.AreEqual(procGood.GetValue<long>("SQL_ERROR_ID"), 0);
            Assert.AreEqual(procGood.GetValue<string>("MESSAGE_RESULT"), null);

            Assert.AreEqual(procBad.GetValue<int>("RETURN_VALUE"), 409);
            Assert.AreEqual(procBad.GetValue<long>("SQL_ERROR_ID"), 0);
            Assert.AreNotEqual(procBad.GetValue<string>("MESSAGE_RESULT"), null);


        }

        [TestMethod]
        public void PutPersonJSON()
        {
            Procedure restProcedure = ProcedureFactory.GetRestProcedure("PUT", "open", "PERSON"); //following convention shema.METHOD_PROC
            restProcedure.LoadFromJson(personJson(2,"me","oh","me@oh.com"));
            string json = restProcedure.ExecuteJson();
            Assert.AreEqual(restProcedure.GetValue<int>("RETURN_VALUE"), 200);
            Assert.AreEqual(restProcedure.GetValue<long>("SQL_ERROR_ID"), 0);
            Assert.AreEqual(restProcedure.GetValue<string>("MESSAGE_RESULT"), null);
        }

        [TestMethod]
        public void GetPersonObject()
        {
            int personId = 1;
            Procedure procedure = ProcedureFactory.GetProcedure("open", "PERSON_BY_ID");
            procedure.SetValue<int>("PERSON_ID", personId);
            Person person = procedure.Execute<Person>();
        }

        [TestMethod]
        public void GetPersonObjectJson()
        {
            Procedure procedure = ProcedureFactory.GetProcedure("open", "PERSON_BY_ID_JSON");
            procedure.SetValue<int>("PERSON_ID", 1);
            Person person = procedure.Execute<Person>();
        }

        

        private string personJson(int id, string firstName, string lastName, string email)
        {
            var dynamic = new
            {
                PersonId = id,
                FirstName = firstName,
                LastName = lastName,
                Email = email
            };
            var jsonSerializerSettings = new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() };
            return JsonConvert.SerializeObject(dynamic, jsonSerializerSettings);
        }

    }
}
