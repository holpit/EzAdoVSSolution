using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using EzAdo;
using EzAdo.Models;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using System.Data;

namespace Test
{
    [TestClass]
    public class openTests
    {
        private string firstName = "dick";
        private string lastName = "tracy";
        private string email = "private.eye@gmail.com";

        private class Person
        {
            public int PersonId { set; get; } = 2;
            public string LastName { set; get; } = "John";
            public string FirstName { set; get; } = "Doe";
            public string Email { set; get; } = "Wee@gmail.com";
        }

        [TestMethod]
        public void Preload()
        {
            //For trouble shooting the factory comment out init() in the ProcedureFactory constructor
            //The init() method can then be stepped through with the following
            ProcedureFactory.Rebuild();
        }

        [TestMethod]
        public void LoadFromObject1()
        {
            Person person = new Person();
            Procedure proc = ProcedureFactory.GetProcedure("open", "POST_PERSON");
            
                proc.LoadFromObject<Person>(person);
                string json = proc.ExecuteJson();
            
        }

        [TestMethod]
        public void LoadFromObject2()
        {
            Person person = new Person();
            Procedure proc = ProcedureFactory.GetProcedure("open", "POST_PERSON");
           
                proc.LoadFromObject<Person>(person);
                string json = proc.ExecuteJson();
            
        }

        //[TestMethod]
        //public void DynamicQuery()
        //{
        //    string connection = "Data Source=ALANHYNEMAN5E09;Initial Catalog=SampleDB;User=sa;Password=3apples";
        //    string qry = "SELECT * FROM PERSON WHERE PERSON_ID = @PERSON_ID";

        //    Procedure proc = ProcedureFactory.GetDynamicProdecure(qry,connection);
        //    proc["personId"] = 1;
        //    DataTable person = proc.ExecuteDataTable();
        //    string firstName = person.Rows[0]["FIRST_NAME"].ToString();
        //    string lastName = person.Rows[0]["LAST_NAME"].ToString();
        //    string email = person.Rows[0]["EMAIL"].ToString();
        //    proc.Dispose();

        //}

        [TestMethod]
        public void PostOrder()
        {
            string json = "{'personId': 1, 'orderName': 'my first order', 'orderItems': [{'name': 'pizza', 'comments': 'Extra Cheese Please'},{'name': 'italian sandwich', 'comments': 'No peppers'}]}";
            Procedure procedure = ProcedureFactory.GetRestProcedure("POST", "trusted", "ORDER");
            procedure.LoadFromJson(json);
            string result = procedure.ExecuteJson();
            
        }

        [TestMethod]
        public void PostPersonBadParameters()
        {
            string firstNameException = null;
            string lastNameException = null;
            string emailException = null;

            Procedure procedure = ProcedureFactory.GetProcedure("open", "POST_PERSON");
            procedure.SetValue<string>("@FIRST_NAME", "this is a first name that exeeds the character maximum length"); 
            procedure.SetValue<string>("@LAST_NAME", "this is a first name that exeeds the character maximum length"); 
            procedure.SetValue<string>("@EMAIL", "badbademail@.bad");



            try
            {
                procedure.ExecuteJson();
            }
            catch (ArgumentException ex)
            {
                emailException = ex.ParamName;
                procedure.SetValue<string>("EMAIL", "A@a.com");
            }
            Assert.AreEqual("@EMAIL", emailException);


        }

        [TestMethod]
        public void PostPersonDuplicates()
        {
            var dynamic = new
            {
                FirstName = "mike",
                LastName = "mike",
                Email = "mike@mike.com"
            };
            var jsonSerializerSettings = new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() };
            string postData = JsonConvert.SerializeObject(dynamic, jsonSerializerSettings);

            Procedure restProcedure = ProcedureFactory.GetRestProcedure("POST", "open", "PERSON"); //following convention shema.METHOD_PROC
            restProcedure.LoadFromJson(postData);
            string json = restProcedure.ExecuteJson();

            Assert.AreEqual(restProcedure.GetValue<int>("RETURN_VALUE"), 409);
            Assert.AreEqual(restProcedure.GetValue<long>("SQL_ERROR_ID"), 0);
            Assert.AreNotEqual(restProcedure.GetValue<string>("MESSAGE_RESULT"), null);


        }

        [TestMethod]
        public void PutPersonJSON()
        {
            Procedure restProcedure = ProcedureFactory.GetRestProcedure("PUT", "open", "PERSON"); //following convention shema.METHOD_PROC
            restProcedure.LoadFromJson(personJson(2,"me","oh","me@oh.com"));
            string json = restProcedure.ExecuteJson();
            Assert.AreEqual(restProcedure.GetValue<int>("RETURN_VALUE"), 200);
            Assert.AreEqual(restProcedure.GetValue<long>("SQL_ERROR_ID"), 0);
            Assert.AreEqual(restProcedure.GetValue<string>("MESSAGE_RESULT"), null);
            Console.WriteLine(json);
        }

        [TestMethod]
        public void GetPersonObject()
        {
            int personId = 1;
            Procedure procedure = ProcedureFactory.GetProcedure("open", "PERSON_BY_ID");
            procedure.SetValue<int>("PERSON_ID", personId);
            Person person = procedure.Execute<Person>();
        }

        [TestMethod]
        public void GetPersonObjectJson()
        {
            int personId = 1;
            Procedure procedure = ProcedureFactory.GetProcedure("open", "PERSON_BY_ID_JSON");
            procedure.SetValue<int>("PERSON_ID", personId);
            Person person = procedure.Execute<Person>();
        }


        private string personJson(int id, string firstName, string lastName, string email)
        {
            var dynamic = new
            {
                PersonId = id,
                FirstName = firstName,
                LastName = lastName,
                Email = email
            };
            var jsonSerializerSettings = new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() };
            return JsonConvert.SerializeObject(dynamic, jsonSerializerSettings);
        }

    }
}
